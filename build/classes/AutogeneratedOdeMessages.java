// THIS FILE IS AUTOMATICALLY GENERATED DURING COMPILATION.
// DO NOT EDIT THIS FILE. ANY CHANGES WILL BE OVERWRITTEN.

package com.google.appinventor.client;

import com.google.gwt.i18n.client.Messages;

public interface AutogeneratedOdeMessages extends Messages {

  /* Components */
  @DefaultMessage("UrsPahoMqttClient")
  @Description("")
  String ursPahoMqttClientComponentPallette();

  @DefaultMessage("AI2 extension block for MQTT communication.")
  @Description("")
  String UrsPahoMqttClientHelpStringComponentPallette();


  /* Properties */
  @DefaultMessage("AutomaticReconnect")
  @Description("")
  String AutomaticReconnectProperties();

  @DefaultMessage("Broker")
  @Description("")
  String BrokerProperties();

  @DefaultMessage("ClientCertFile")
  @Description("")
  String ClientCertFileProperties();

  @DefaultMessage("ClientID")
  @Description("")
  String ClientIDProperties();

  @DefaultMessage("ClientKeyFile")
  @Description("")
  String ClientKeyFileProperties();

  @DefaultMessage("ClientKeyPassword")
  @Description("")
  String ClientKeyPasswordProperties();

  @DefaultMessage("ClientKeystoreFile")
  @Description("")
  String ClientKeystoreFileProperties();

  @DefaultMessage("ClientKeystorePassword")
  @Description("")
  String ClientKeystorePasswordProperties();

  @DefaultMessage("ClientPemFormatted")
  @Description("")
  String ClientPemFormattedProperties();

  @DefaultMessage("ConnectionState")
  @Description("")
  String ConnectionStateProperties();

  @DefaultMessage("ConnectionTimeout")
  @Description("")
  String ConnectionTimeoutProperties();

  @DefaultMessage("IsConnected")
  @Description("")
  String IsConnectedProperties();

  @DefaultMessage("IsDisconnected")
  @Description("")
  String IsDisconnectedProperties();

  @DefaultMessage("KeepAlive")
  @Description("")
  String KeepAliveProperties();

  @DefaultMessage("LastAction")
  @Description("")
  String LastActionProperties();

  @DefaultMessage("LastErrorCode")
  @Description("")
  String LastErrorCodeProperties();

  @DefaultMessage("LastErrorMessage")
  @Description("")
  String LastErrorMessageProperties();

  @DefaultMessage("LastExecptionCause")
  @Description("")
  String LastExecptionCauseProperties();

  @DefaultMessage("MaxInflight")
  @Description("")
  String MaxInflightProperties();

  @DefaultMessage("MaxReconnectDelay")
  @Description("")
  String MaxReconnectDelayProperties();

  @DefaultMessage("Port")
  @Description("")
  String PortProperties();

  @DefaultMessage("Protocol")
  @Description("")
  String ProtocolProperties();

  @DefaultMessage("StateConnected")
  @Description("")
  String StateConnectedProperties();

  @DefaultMessage("StateConnecting")
  @Description("")
  String StateConnectingProperties();

  @DefaultMessage("StateConnectionAbortet")
  @Description("")
  String StateConnectionAbortetProperties();

  @DefaultMessage("StateDisconnected")
  @Description("")
  String StateDisconnectedProperties();

  @DefaultMessage("StateDisconnecting")
  @Description("")
  String StateDisconnectingProperties();

  @DefaultMessage("TimeToWait")
  @Description("")
  String TimeToWaitProperties();

  @DefaultMessage("TrustedCertFile")
  @Description("")
  String TrustedCertFileProperties();

  @DefaultMessage("TruststoreFile")
  @Description("")
  String TruststoreFileProperties();

  @DefaultMessage("TruststorePassword")
  @Description("")
  String TruststorePasswordProperties();

  @DefaultMessage("UserName")
  @Description("")
  String UserNameProperties();

  @DefaultMessage("UserPassword")
  @Description("")
  String UserPasswordProperties();


  /* Methods */
  @DefaultMessage("Connect")
  @Description("")
  String ConnectMethods();

  @DefaultMessage("ConnectWithLastWill")
  @Description("")
  String ConnectWithLastWillMethods();

  @DefaultMessage("Disconnect")
  @Description("")
  String DisconnectMethods();

  @DefaultMessage("FromDictionary")
  @Description("")
  String FromDictionaryMethods();

  @DefaultMessage("IsNull")
  @Description("")
  String IsNullMethods();

  @DefaultMessage("Publish")
  @Description("")
  String PublishMethods();

  @DefaultMessage("PublishBinary")
  @Description("")
  String PublishBinaryMethods();

  @DefaultMessage("PublishByteArray")
  @Description("")
  String PublishByteArrayMethods();

  @DefaultMessage("PublishEx")
  @Description("")
  String PublishExMethods();

  @DefaultMessage("Subscribe")
  @Description("")
  String SubscribeMethods();

  @DefaultMessage("SubscribeByteArray")
  @Description("")
  String SubscribeByteArrayMethods();

  @DefaultMessage("ToDictionary")
  @Description("")
  String ToDictionaryMethods();

  @DefaultMessage("Unsubscribe")
  @Description("")
  String UnsubscribeMethods();


  /* Events */
  @DefaultMessage("ConnectionStateChanged")
  @Description("")
  String ConnectionStateChangedEvents();

  @DefaultMessage("ErrorOccurred")
  @Description("")
  String ErrorOccurredEvents();

  @DefaultMessage("MessageReceived")
  @Description("")
  String MessageReceivedEvents();

  @DefaultMessage("PublishedByteArrayReceived")
  @Description("")
  String PublishedByteArrayReceivedEvents();

  @DefaultMessage("Auto Reconnect to MQTT Broker after disconnect?")
  @Description("")
  String AutomaticReconnectPropertyDescriptions();

  @DefaultMessage("The IP address or hostname of the server to connect to.")
  @Description("")
  String BrokerPropertyDescriptions();

  @DefaultMessage("The name of the client certificate file.")
  @Description("")
  String ClientCertFilePropertyDescriptions();

  @DefaultMessage("The unique client Id. If this field is blank a random GUID is used.")
  @Description("")
  String ClientIDPropertyDescriptions();

  @DefaultMessage("The name of the client key file.")
  @Description("")
  String ClientKeyFilePropertyDescriptions();

  @DefaultMessage("The client key password.")
  @Description("")
  String ClientKeyPasswordPropertyDescriptions();

  @DefaultMessage("The name of the client keystore file.")
  @Description("")
  String ClientKeystoreFilePropertyDescriptions();

  @DefaultMessage("The client keystore password.")
  @Description("")
  String ClientKeystorePasswordPropertyDescriptions();

  @DefaultMessage("The client certifacte and key files are PEM formatted.")
  @Description("")
  String ClientPemFormattedPropertyDescriptions();

  @DefaultMessage("Connect to a MQTT broker.")
  @Description("")
  String ConnectMethodDescriptions();

  @DefaultMessage("Connect to a MQTT broker.")
  @Description("")
  String ConnectWithLastWillMethodDescriptions();

  @DefaultMessage("Connection state has changed.")
  @Description("")
  String ConnectionStateChangedEventDescriptions();

  @DefaultMessage("The connection state:0: Disconnected. The client is not connected to a broker.1: Connecting. The client is currently creating a connection to a MQTT broker.2: Connected. The client is connected to a MQTT broker.3: Disconnecting. The client is currently disconnecting from the MQTT broker.4: ConnectionAbortet. The connection could not be established or was interrupted.")
  @Description("")
  String ConnectionStatePropertyDescriptions();

  @DefaultMessage("Connection timeout [seconds].")
  @Description("")
  String ConnectionTimeoutPropertyDescriptions();

  @DefaultMessage("Disconnects from the broker.")
  @Description("")
  String DisconnectMethodDescriptions();

  @DefaultMessage("Error occurred.")
  @Description("")
  String ErrorOccurredEventDescriptions();

  @DefaultMessage("Export conection parameters to a dictionary.")
  @Description("")
  String FromDictionaryMethodDescriptions();

  @DefaultMessage("true: Client is connected to a MQTT broker.")
  @Description("")
  String IsConnectedPropertyDescriptions();

  @DefaultMessage("true: Client is disconnected from the MQTT broker.")
  @Description("")
  String IsDisconnectedPropertyDescriptions();

  @DefaultMessage("Test whether an object is null.")
  @Description("")
  String IsNullMethodDescriptions();

  @DefaultMessage("Keep alive interval [seconds].")
  @Description("")
  String KeepAlivePropertyDescriptions();

  @DefaultMessage("Returns the last Action the error code belongs to.")
  @Description("")
  String LastActionPropertyDescriptions();

  @DefaultMessage("Returns the code of the last error.")
  @Description("")
  String LastErrorCodePropertyDescriptions();

  @DefaultMessage("Returns a text message about the last error.")
  @Description("")
  String LastErrorMessagePropertyDescriptions();

  @DefaultMessage("Provides information on the last exception.")
  @Description("")
  String LastExecptionCausePropertyDescriptions();

  @DefaultMessage("The max inflight limits to how many messages we can send without receiving acknowledgments.Increase this value in a high traffic environment.")
  @Description("")
  String MaxInflightPropertyDescriptions();

  @DefaultMessage("Set the maximum time to wait between reconnects [millis].")
  @Description("")
  String MaxReconnectDelayPropertyDescriptions();

  @DefaultMessage("Message received.")
  @Description("")
  String MessageReceivedEventDescriptions();

  @DefaultMessage("The port number of the server to connect to.")
  @Description("")
  String PortPropertyDescriptions();

  @DefaultMessage("The protocol to use.")
  @Description("")
  String ProtocolPropertyDescriptions();

  @DefaultMessage("Publishes a binary coded MQTT message.")
  @Description("")
  String PublishBinaryMethodDescriptions();

  @DefaultMessage("Publishes a binary array.")
  @Description("")
  String PublishByteArrayMethodDescriptions();

  @DefaultMessage("Publish a MQTT message.")
  @Description("")
  String PublishExMethodDescriptions();

  @DefaultMessage("Publish a MQTT message. Retain flag is false, QoS is 0.")
  @Description("")
  String PublishMethodDescriptions();

  @DefaultMessage("Message with byte array received.")
  @Description("")
  String PublishedByteArrayReceivedEventDescriptions();

  @DefaultMessage("Constant for connection state ''Connected''.")
  @Description("")
  String StateConnectedPropertyDescriptions();

  @DefaultMessage("Constant for connection state ''Connecting''.")
  @Description("")
  String StateConnectingPropertyDescriptions();

  @DefaultMessage("Constant for connection state ''ConnectionAbortet''.")
  @Description("")
  String StateConnectionAbortetPropertyDescriptions();

  @DefaultMessage("Constant for connection state ''Disconnected''.")
  @Description("")
  String StateDisconnectedPropertyDescriptions();

  @DefaultMessage("Constant for connection state ''Disconnecting''.")
  @Description("")
  String StateDisconnectingPropertyDescriptions();

  @DefaultMessage("Subscribe a topic for receiving byte arrays.")
  @Description("")
  String SubscribeByteArrayMethodDescriptions();

  @DefaultMessage("Subscribe a topic.")
  @Description("")
  String SubscribeMethodDescriptions();

  @DefaultMessage("Maximum time to wait for an action to complete [seconds].-1 means the action will not timeout.")
  @Description("")
  String TimeToWaitPropertyDescriptions();

  @DefaultMessage("Export conection parameters to a dictionary.")
  @Description("")
  String ToDictionaryMethodDescriptions();

  @DefaultMessage("The name of the trusted certificate file.")
  @Description("")
  String TrustedCertFilePropertyDescriptions();

  @DefaultMessage("The name of the truststore file.")
  @Description("")
  String TruststoreFilePropertyDescriptions();

  @DefaultMessage("The password of the truststore file.")
  @Description("")
  String TruststorePasswordPropertyDescriptions();

  @DefaultMessage("Unsubscribe a topic.")
  @Description("")
  String UnsubscribeMethodDescriptions();

  @DefaultMessage("The user name used authentication and authorization.")
  @Description("")
  String UserNamePropertyDescriptions();

  @DefaultMessage("The password used authentication and authorization.")
  @Description("")
  String UserPasswordPropertyDescriptions();


  /* Parameters */
  @DefaultMessage("ActionName")
  @Description("")
  String ActionNameParams();

  @DefaultMessage("BinaryMessage")
  @Description("")
  String BinaryMessageParams();

  @DefaultMessage("ByteArray")
  @Description("")
  String ByteArrayParams();

  @DefaultMessage("CleanSession")
  @Description("")
  String CleanSessionParams();

  @DefaultMessage("DupFlag")
  @Description("")
  String DupFlagParams();

  @DefaultMessage("ErrorCode")
  @Description("")
  String ErrorCodeParams();

  @DefaultMessage("ErrorMessage")
  @Description("")
  String ErrorMessageParams();

  @DefaultMessage("Message")
  @Description("")
  String MessageParams();

  @DefaultMessage("NewState")
  @Description("")
  String NewStateParams();

  @DefaultMessage("Object")
  @Description("")
  String ObjectParams();

  @DefaultMessage("Payload")
  @Description("")
  String PayloadParams();

  @DefaultMessage("QoS")
  @Description("")
  String QoSParams();

  @DefaultMessage("Retain")
  @Description("")
  String RetainParams();

  @DefaultMessage("RetainFlag")
  @Description("")
  String RetainFlagParams();

  @DefaultMessage("StateString")
  @Description("")
  String StateStringParams();

  @DefaultMessage("Topic")
  @Description("")
  String TopicParams();

  @DefaultMessage("dict")
  @Description("")
  String dictParams();


  /* Component Categories */
  @DefaultMessage("Extension")
  @Description("")
  String extensionComponentPallette();


  /* Property Categories */
  @DefaultMessage("Appearance")
  @Description("")
  String AppearancePropertyCategory();

  @DefaultMessage("Behavior")
  @Description("")
  String BehaviorPropertyCategory();

  @DefaultMessage("Unspecified")
  @Description("")
  String UnspecifiedPropertyCategory();

}
